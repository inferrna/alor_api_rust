/* 
 * Alor OpenAPI V2
 *
 * API для работы с торговой системой АЛОР Брокер. Предоставляет интерфейсы для выставления заявок и получения биржевой информации.  Данные для неавторизованных запросов предоставляются с задержкой от 15 минут, для авторизованных - без задержек.   Публичная биржевая информация может быть получена через HTTP(S) API, а также доступна через однократно установленное WebSocket соединение. <br> **Внимание!** WebSocket соединения могут и будут разрываться *(например, если клиент не успевает обрабатывать сообщения и на стороне API в буфере накопится более 5000 событий)*. <br> Во внешнем ПО необходимо предусмотреть механизмы переподключения и переподписки (при необходимости)! <br> <br>  В OpenAPI V2 доступны \"Московская Биржа\" (MOEX) и \"Биржа СПБ\" (SPBX).   <h4> Доступные типы данных </h4>  * Все сделки  * Все заявки  * Информация по инструментам  * Котировки  * Биржевые стаканы  * Исторические данные  * Позиции  * Информация о клиенте  <h4>Поддерживаемые виды заявок</h4>  * рыночные  * лимитные  * стоп-лосс  * тейк-профит  * стоп-лосс лимит  * тейк-профит лимит  <h4>    Ограничения по частоте запросов     </h4> <p>На текущий момент ограничений по количеству запросов в минуту нет, однако есть ограничение на общее количество подписок (сотни тысяч). При достижении лимита подписок клиент будет заблокирован и в течение нескольких минут не сможет создавать новые подписки. Уже существующие подписки продолжат работать. <br/>  Сервер может обрабатывать \"тяжелые\" запросы (пример - история за все время) и запросы без авторизации с меньшим приоритетом.<br/> <br/></p>   <h2> Авторизация </h2>  <h4>OAuth</h4>  <b>Внимание!</b>   JWT и refresh token — равносильны логину и паролю. Их нужно скрывать от публичного доступа.  <h4>Для разработчиков сторонних приложений, в которых торговлю будут вести их пользователи.</h4>  Мы предоставляем сервис для авторизации сторониих приложений по стандарту OAuth 2.0. С примером приложения, использующего OAuth сервис для авторизации пользователей можно ознакомиться в разделе  <a href=\"/examples\">Примеры</a>.  Список разрешений (scopes), которые могут быть выданы приложению: <table>   <tr>     <td><b>OrdersRead</b></td>     <td>Чтение выставленных заявок</td>   </tr>   <tr>     <td><b>OrdersCreate</b></td>     <td>Выставление заявок</td>   </tr>   <tr>     <td><b>Trades</b></td>     <td>Чтение совершенных сделок</td>   </tr>   <tr>     <td><b>Personal</b></td>     <td>Персональная информация: ФИО, почта и т.п.</td>   </tr>   <tr>     <td><b>Stats</b></td>     <td>Статистика: прибыль, средние цены и т.п.</td>   </tr> </table>  <h4>Для ведения операций от своего имени</h4>  Выписать себе <b>refresh token</b> для ведения операций от своего имени [можно здесь](https://alor.dev/open-api-tokens).  <h2>Краткое описание работы с авторизацией</h2>  Чтобы выполнить авторизованный запрос, добавьте в запрос заголовок с именем \"Authorization\" и значением, состоящим из префикса `\"Bearer \"` и валидного JWT токена.  Срок жизни JWT короткий: это сделано для безопасности.  Для большинства вариантов использования API мы рекоммендуем использовать механизм  <b>refresh token</b> .  Механизм  <b>refresh token</b>  позволяет получать JWT с новым сроком жизни. Для этого отправьте POST запрос на адрес `https://oauthdev.alor.ru/refresh?token={refreshToken}` *(тестовый контур)* или `https://oauth.alor.ru/refresh?token={refreshToken}` *(боевой контур)*. Если у  <b>refresh token</b>  не истек срок жизни и не он не был отозван, то в теле ответа в поле AccessToken вернётся свежий JWT токен.   Срок жизни  <b>refresh token</b>, получаемого обычным способом — 1 месяц.   Срок жизни  <b>refresh token</b>, получаемого самостоятельным выписыванием — год.  | |-  > Если мы для вас не завели портфели для ведения торговли в игровом контуре, оставьте заявку на <a href=\"mailto:openapi@alor.ru\">openapi@alor.ru</a> или свяжитесь с нами в [телеграме](https://t.me/AlorOpenAPI).  </br></br> Тестовый контур: `https://apidev.alor.ru`  Боевой контур: `https://api.alor.ru` 
 *
 * OpenAPI spec version: 1.0
 * Contact: openapi@alor.ru
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
#![allow(unused_imports)]
use std::sync::Arc;
use std::borrow::Borrow;
use std::borrow::Cow;
use std::collections::HashMap;

use hyper;
use serde_json;
use serde_json::Value;
use tokio::runtime::Runtime;
use futures;
use futures::{Future, Stream};
use hyper::Body;
use hyper::body::Bytes;
use hyper::body::HttpBody;
use std::str::FromStr;
use chrono::{NaiveDate, NaiveDateTime, DateTime, FixedOffset, Utc, SecondsFormat};
use crate::{OutlinePrint};
use crate::models::*;
use super::{Error, configuration};
use headers::{Authorization, Header};
use headers::authorization::Credentials;
use rust_decimal::Decimal;

pub struct UsersApiClient<C: hyper::client::connect::Connect + Clone + Send + Sync> {
    configuration: Arc<configuration::Configuration<C>>,
}

impl<C: hyper::client::connect::Connect + Clone + Send + Sync + 'static> UsersApiClient<C> {
    pub fn new(configuration: Arc<configuration::Configuration<C>>) -> UsersApiClient<C> {
        UsersApiClient {
            configuration: configuration,
        }
    }
}

#[async_trait::async_trait]
pub trait UsersApi {
    async fn dev_get_all_orders(&self, exchange: crate::models::Exchange, portfolio: &str, format: Option<crate::models::JsonFormat>) -> Result<Vec<Order>, Error<serde_json::Value>>;
    async fn dev_get_all_positions(&self, exchange: crate::models::Exchange, portfolio: &str, format: Option<crate::models::JsonFormat>, without_currency: Option<crate::models::SchemaEnum>) -> Result<Vec<Position>, Error<serde_json::Value>>;
    async fn dev_get_all_stop_orders(&self, exchange: crate::models::Exchange, portfolio: &str, format: Option<crate::models::JsonFormat>) -> Result<Vec<StoporderWarp>, Error<serde_json::Value>>;
    async fn dev_get_all_trades(&self, exchange: crate::models::Exchange, portfolio: &str, format: Option<crate::models::JsonFormat>) -> Result<Vec<Trade>, Error<serde_json::Value>>;
    async fn dev_get_one_order(&self, exchange: crate::models::Exchange, portfolio: &str, order_id: i32, format: Option<crate::models::JsonFormat>) -> Result<Order, Error<serde_json::Value>>;
    async fn dev_get_one_position(&self, exchange: crate::models::Exchange, portfolio: &str, symbol: &str, format: Option<crate::models::JsonFormat>) -> Result<Position, Error<serde_json::Value>>;
    async fn dev_get_one_stop_order(&self, exchange: crate::models::Exchange, portfolio: &str, order_id: i32, format: Option<crate::models::JsonFormat>) -> Result<StoporderWarp, Error<serde_json::Value>>;
    async fn dev_get_ticker_trades(&self, exchange: crate::models::Exchange, portfolio: &str, ticker: &str, format: Option<crate::models::JsonFormat>) -> Result<Vec<Trade>, Error<serde_json::Value>>;
    async fn dev_user_portfolio(&self, username: &str) -> Result<ServersInfo, Error<serde_json::Value>>;
    async fn exchange_portfolio_money(&self, exchange: crate::models::Exchange, portfolio: &str, format: Option<crate::models::JsonFormat>) -> Result<Money, Error<serde_json::Value>>;
    async fn exchange_portfolio_summary(&self, exchange: crate::models::Exchange, portfolio: &str, format: Option<crate::models::JsonFormat>) -> Result<Summary, Error<serde_json::Value>>;
    async fn fortsrisk(&self, exchange: crate::models::Exchange, portfolio: &str, format: Option<crate::models::JsonFormat>) -> Result<Fortsrisk, Error<serde_json::Value>>;
    async fn risk(&self, exchange: crate::models::Exchange, portfolio: &str, format: Option<crate::models::JsonFormat>) -> Result<Risk, Error<serde_json::Value>>;
    async fn trade_stats(&self, exchange: crate::models::Exchange, portfolio: &str, date_from: Option<NaiveDate>, from: Option<&str>, limit: Option<i32>, descending: Option<bool>, format: Option<crate::models::JsonFormat>) -> Result<Vec<Trade>, Error<serde_json::Value>>;
    async fn trade_stats_by_symbol(&self, exchange: crate::models::Exchange, portfolio: &str, symbol: &str, date_from: Option<NaiveDate>, from: Option<&str>, limit: Option<i32>, descending: Option<bool>, format: Option<crate::models::JsonFormat>) -> Result<Vec<Trade>, Error<serde_json::Value>>;
}

#[async_trait::async_trait]
impl<C: hyper::client::connect::Connect + Clone + Send + Sync + 'static>UsersApi for UsersApiClient<C> {
 ///
 /// Получение информации о всех заявках
 ///
 /// Запрос информации о всех заявках
 ///
 /// # Arguments
 ///
 /// * `exchange` Биржа (required)
 /// 
 /// 
 ///
 /// * `portfolio` Идентификатор клиентского портфеля (required)
 /// Example: portfolio_example
 /// 
 ///
 /// * `format` Формат возвращаемого сервером JSON (optional)
 /// 
 /// 
 ///
    async fn dev_get_all_orders(&self, exchange: crate::models::Exchange, portfolio: &str, format: Option<crate::models::JsonFormat>) -> Result<Vec<Order>, Error<serde_json::Value>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let mut auth_headers = HashMap::<String, String>::new();
        let mut auth_query = HashMap::<String, String>::new();
        if let Some(ref token) = configuration.oauth_access_token {
            auth_headers.insert("Authorization".to_owned(), format!("Bearer {}", token));
        }
        let method = hyper::Method::GET;

        let query_string = {
            let mut api_query = ::url::form_urlencoded::Serializer::new(String::new());
            let has_query_params = true;
        if let Some(format) = format {
            api_query.append_pair("format", &format.outline_print());
        }
            for (key, val) in &auth_query {
                api_query.append_pair(key, val);
            }
            if has_query_params || auth_query.len()>0  {
                format!("/?{}", api_query.finish())
            } else {
                "".to_string()
            }
        };
        let uri_str = format!("{}/md/v2/clients/{exchange}/{portfolio}/orders{}", configuration.base_path, query_string, exchange=exchange.outline_print(), portfolio=portfolio.outline_print());

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        //dbg!(&uri_str);

        let uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req =
            hyper::Request::builder()
                .method(method)
                .uri(uri);

        let headers = req.headers_mut().unwrap();

        if let Some(ref user_agent) = configuration.user_agent {
            headers.insert(hyper::header::USER_AGENT, user_agent.parse().unwrap());
        }


        for (key, val) in auth_headers {
            headers.insert(
                hyper::header::HeaderName::from_str(key.as_ref()).unwrap(),
                val.parse().unwrap(),
            );
        }

        let somebody = Body::empty();

        let req = req.body(somebody).unwrap();

        let res = configuration
            .client.request(req)
            .await
            .map_err(|e| -> Error<serde_json::Value> { Error::from(e) });

        let mut res = res?;

        let status = res.status();
        let mut res_body: Vec<u8> = vec![];

        while let Some(chunk) = res.body_mut().data().await {
            let mut chunk_vec = chunk.unwrap().to_vec();
            res_body.append(chunk_vec.as_mut());
        }

        //Uncomment to see what went wrong
/*
        let string_result = std::str::from_utf8(&res_body).unwrap();
        let value_result: Result<serde_json::Value, serde_json::Error> = serde_json::from_str(&string_result);
        if let Ok(json_value) = value_result {
            //Valid json, invalid structure, pretty-printed output
            eprintln!("{}", serde_json::to_string_pretty(&json_value).unwrap());
        } else {
            //Invalid json, raw output
            dbg!(&string_result);
        }
*/
        let res_body =
            if status.is_success() {
                Ok(res_body)
            } else {
                Err(Error::from((status, res_body.borrow())))
            };

        let mut res_body = res_body?;

        let res_body =
            serde_json::from_slice(res_body.borrow())
            .map_err(|e| -> Error<serde_json::Value> { Error::from(e) });

        res_body
    }

 ///
 /// Получение информации о позициях
 ///
 /// Запрос информации о позициях
 ///
 /// # Arguments
 ///
 /// * `exchange` Биржа (required)
 /// 
 /// 
 ///
 /// * `portfolio` Идентификатор клиентского портфеля (required)
 /// Example: portfolio_example
 /// 
 ///
 /// * `format` Формат возвращаемого сервером JSON (optional)
 /// 
 /// 
 ///
 /// * `without_currency` Исключить из ответа все денежные инструменты, по умолчанию false (optional)
 /// 
 /// 
 ///
    async fn dev_get_all_positions(&self, exchange: crate::models::Exchange, portfolio: &str, format: Option<crate::models::JsonFormat>, without_currency: Option<crate::models::SchemaEnum>) -> Result<Vec<Position>, Error<serde_json::Value>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let mut auth_headers = HashMap::<String, String>::new();
        let mut auth_query = HashMap::<String, String>::new();
        if let Some(ref token) = configuration.oauth_access_token {
            auth_headers.insert("Authorization".to_owned(), format!("Bearer {}", token));
        }
        let method = hyper::Method::GET;

        let query_string = {
            let mut api_query = ::url::form_urlencoded::Serializer::new(String::new());
            let has_query_params = true;
        if let Some(format) = format {
            api_query.append_pair("format", &format.outline_print());
        }
        if let Some(without_currency) = without_currency {
            api_query.append_pair("withoutCurrency", &without_currency.outline_print());
        }
            for (key, val) in &auth_query {
                api_query.append_pair(key, val);
            }
            if has_query_params || auth_query.len()>0  {
                format!("/?{}", api_query.finish())
            } else {
                "".to_string()
            }
        };
        let uri_str = format!("{}/md/v2/Clients/{exchange}/{portfolio}/positions{}", configuration.base_path, query_string, exchange=exchange.outline_print(), portfolio=portfolio.outline_print());

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        //dbg!(&uri_str);

        let uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req =
            hyper::Request::builder()
                .method(method)
                .uri(uri);

        let headers = req.headers_mut().unwrap();

        if let Some(ref user_agent) = configuration.user_agent {
            headers.insert(hyper::header::USER_AGENT, user_agent.parse().unwrap());
        }


        for (key, val) in auth_headers {
            headers.insert(
                hyper::header::HeaderName::from_str(key.as_ref()).unwrap(),
                val.parse().unwrap(),
            );
        }

        let somebody = Body::empty();

        let req = req.body(somebody).unwrap();

        let res = configuration
            .client.request(req)
            .await
            .map_err(|e| -> Error<serde_json::Value> { Error::from(e) });

        let mut res = res?;

        let status = res.status();
        let mut res_body: Vec<u8> = vec![];

        while let Some(chunk) = res.body_mut().data().await {
            let mut chunk_vec = chunk.unwrap().to_vec();
            res_body.append(chunk_vec.as_mut());
        }

        //Uncomment to see what went wrong
/*
        let string_result = std::str::from_utf8(&res_body).unwrap();
        let value_result: Result<serde_json::Value, serde_json::Error> = serde_json::from_str(&string_result);
        if let Ok(json_value) = value_result {
            //Valid json, invalid structure, pretty-printed output
            eprintln!("{}", serde_json::to_string_pretty(&json_value).unwrap());
        } else {
            //Invalid json, raw output
            dbg!(&string_result);
        }
*/
        let res_body =
            if status.is_success() {
                Ok(res_body)
            } else {
                Err(Error::from((status, res_body.borrow())))
            };

        let mut res_body = res_body?;

        let res_body =
            serde_json::from_slice(res_body.borrow())
            .map_err(|e| -> Error<serde_json::Value> { Error::from(e) });

        res_body
    }

 ///
 /// Получение информации о стоп-заявках
 ///
 /// Запрос информации о всех стоп-заявках
 ///
 /// # Arguments
 ///
 /// * `exchange` Биржа (required)
 /// 
 /// 
 ///
 /// * `portfolio` Идентификатор клиентского портфеля (required)
 /// Example: portfolio_example
 /// 
 ///
 /// * `format` Формат возвращаемого сервером JSON (optional)
 /// 
 /// 
 ///
    async fn dev_get_all_stop_orders(&self, exchange: crate::models::Exchange, portfolio: &str, format: Option<crate::models::JsonFormat>) -> Result<Vec<StoporderWarp>, Error<serde_json::Value>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let mut auth_headers = HashMap::<String, String>::new();
        let mut auth_query = HashMap::<String, String>::new();
        if let Some(ref token) = configuration.oauth_access_token {
            auth_headers.insert("Authorization".to_owned(), format!("Bearer {}", token));
        }
        let method = hyper::Method::GET;

        let query_string = {
            let mut api_query = ::url::form_urlencoded::Serializer::new(String::new());
            let has_query_params = true;
        if let Some(format) = format {
            api_query.append_pair("format", &format.outline_print());
        }
            for (key, val) in &auth_query {
                api_query.append_pair(key, val);
            }
            if has_query_params || auth_query.len()>0  {
                format!("/?{}", api_query.finish())
            } else {
                "".to_string()
            }
        };
        let uri_str = format!("{}/md/v2/clients/{exchange}/{portfolio}/stoporders{}", configuration.base_path, query_string, exchange=exchange.outline_print(), portfolio=portfolio.outline_print());

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        //dbg!(&uri_str);

        let uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req =
            hyper::Request::builder()
                .method(method)
                .uri(uri);

        let headers = req.headers_mut().unwrap();

        if let Some(ref user_agent) = configuration.user_agent {
            headers.insert(hyper::header::USER_AGENT, user_agent.parse().unwrap());
        }


        for (key, val) in auth_headers {
            headers.insert(
                hyper::header::HeaderName::from_str(key.as_ref()).unwrap(),
                val.parse().unwrap(),
            );
        }

        let somebody = Body::empty();

        let req = req.body(somebody).unwrap();

        let res = configuration
            .client.request(req)
            .await
            .map_err(|e| -> Error<serde_json::Value> { Error::from(e) });

        let mut res = res?;

        let status = res.status();
        let mut res_body: Vec<u8> = vec![];

        while let Some(chunk) = res.body_mut().data().await {
            let mut chunk_vec = chunk.unwrap().to_vec();
            res_body.append(chunk_vec.as_mut());
        }

        //Uncomment to see what went wrong
/*
        let string_result = std::str::from_utf8(&res_body).unwrap();
        let value_result: Result<serde_json::Value, serde_json::Error> = serde_json::from_str(&string_result);
        if let Ok(json_value) = value_result {
            //Valid json, invalid structure, pretty-printed output
            eprintln!("{}", serde_json::to_string_pretty(&json_value).unwrap());
        } else {
            //Invalid json, raw output
            dbg!(&string_result);
        }
*/
        let res_body =
            if status.is_success() {
                Ok(res_body)
            } else {
                Err(Error::from((status, res_body.borrow())))
            };

        let mut res_body = res_body?;

        let res_body =
            serde_json::from_slice(res_body.borrow())
            .map_err(|e| -> Error<serde_json::Value> { Error::from(e) });

        res_body
    }

 ///
 /// Получение информации о сделках
 ///
 /// Запрос информации о сделках (только за текущую торговую сессию)
 ///
 /// # Arguments
 ///
 /// * `exchange` Биржа (required)
 /// 
 /// 
 ///
 /// * `portfolio` Идентификатор клиентского портфеля (required)
 /// Example: portfolio_example
 /// 
 ///
 /// * `format` Формат возвращаемого сервером JSON (optional)
 /// 
 /// 
 ///
    async fn dev_get_all_trades(&self, exchange: crate::models::Exchange, portfolio: &str, format: Option<crate::models::JsonFormat>) -> Result<Vec<Trade>, Error<serde_json::Value>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let mut auth_headers = HashMap::<String, String>::new();
        let mut auth_query = HashMap::<String, String>::new();
        if let Some(ref token) = configuration.oauth_access_token {
            auth_headers.insert("Authorization".to_owned(), format!("Bearer {}", token));
        }
        let method = hyper::Method::GET;

        let query_string = {
            let mut api_query = ::url::form_urlencoded::Serializer::new(String::new());
            let has_query_params = true;
        if let Some(format) = format {
            api_query.append_pair("format", &format.outline_print());
        }
            for (key, val) in &auth_query {
                api_query.append_pair(key, val);
            }
            if has_query_params || auth_query.len()>0  {
                format!("/?{}", api_query.finish())
            } else {
                "".to_string()
            }
        };
        let uri_str = format!("{}/md/v2/Clients/{exchange}/{portfolio}/trades{}", configuration.base_path, query_string, exchange=exchange.outline_print(), portfolio=portfolio.outline_print());

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        //dbg!(&uri_str);

        let uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req =
            hyper::Request::builder()
                .method(method)
                .uri(uri);

        let headers = req.headers_mut().unwrap();

        if let Some(ref user_agent) = configuration.user_agent {
            headers.insert(hyper::header::USER_AGENT, user_agent.parse().unwrap());
        }


        for (key, val) in auth_headers {
            headers.insert(
                hyper::header::HeaderName::from_str(key.as_ref()).unwrap(),
                val.parse().unwrap(),
            );
        }

        let somebody = Body::empty();

        let req = req.body(somebody).unwrap();

        let res = configuration
            .client.request(req)
            .await
            .map_err(|e| -> Error<serde_json::Value> { Error::from(e) });

        let mut res = res?;

        let status = res.status();
        let mut res_body: Vec<u8> = vec![];

        while let Some(chunk) = res.body_mut().data().await {
            let mut chunk_vec = chunk.unwrap().to_vec();
            res_body.append(chunk_vec.as_mut());
        }

        //Uncomment to see what went wrong
/*
        let string_result = std::str::from_utf8(&res_body).unwrap();
        let value_result: Result<serde_json::Value, serde_json::Error> = serde_json::from_str(&string_result);
        if let Ok(json_value) = value_result {
            //Valid json, invalid structure, pretty-printed output
            eprintln!("{}", serde_json::to_string_pretty(&json_value).unwrap());
        } else {
            //Invalid json, raw output
            dbg!(&string_result);
        }
*/
        let res_body =
            if status.is_success() {
                Ok(res_body)
            } else {
                Err(Error::from((status, res_body.borrow())))
            };

        let mut res_body = res_body?;

        let res_body =
            serde_json::from_slice(res_body.borrow())
            .map_err(|e| -> Error<serde_json::Value> { Error::from(e) });

        res_body
    }

 ///
 /// Получение информации о выбранной заявке
 ///
 /// Запрос информации о выбранной заявке
 ///
 /// # Arguments
 ///
 /// * `exchange` Биржа (required)
 /// 
 /// 
 ///
 /// * `portfolio` Идентификатор клиентского портфеля (required)
 /// Example: portfolio_example
 /// 
 ///
 /// * `order_id` Идентификатор заявки (required)
 /// Example: 56
 /// 
 ///
 /// * `format` Формат возвращаемого сервером JSON (optional)
 /// 
 /// 
 ///
    async fn dev_get_one_order(&self, exchange: crate::models::Exchange, portfolio: &str, order_id: i32, format: Option<crate::models::JsonFormat>) -> Result<Order, Error<serde_json::Value>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let mut auth_headers = HashMap::<String, String>::new();
        let mut auth_query = HashMap::<String, String>::new();
        if let Some(ref token) = configuration.oauth_access_token {
            auth_headers.insert("Authorization".to_owned(), format!("Bearer {}", token));
        }
        let method = hyper::Method::GET;

        let query_string = {
            let mut api_query = ::url::form_urlencoded::Serializer::new(String::new());
            let has_query_params = true;
        if let Some(format) = format {
            api_query.append_pair("format", &format.outline_print());
        }
            for (key, val) in &auth_query {
                api_query.append_pair(key, val);
            }
            if has_query_params || auth_query.len()>0  {
                format!("/?{}", api_query.finish())
            } else {
                "".to_string()
            }
        };
        let uri_str = format!("{}/md/v2/clients/{exchange}/{portfolio}/orders/{orderId}{}", configuration.base_path, query_string, exchange=exchange.outline_print(), portfolio=portfolio.outline_print(), orderId=order_id.outline_print());

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        //dbg!(&uri_str);

        let uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req =
            hyper::Request::builder()
                .method(method)
                .uri(uri);

        let headers = req.headers_mut().unwrap();

        if let Some(ref user_agent) = configuration.user_agent {
            headers.insert(hyper::header::USER_AGENT, user_agent.parse().unwrap());
        }


        for (key, val) in auth_headers {
            headers.insert(
                hyper::header::HeaderName::from_str(key.as_ref()).unwrap(),
                val.parse().unwrap(),
            );
        }

        let somebody = Body::empty();

        let req = req.body(somebody).unwrap();

        let res = configuration
            .client.request(req)
            .await
            .map_err(|e| -> Error<serde_json::Value> { Error::from(e) });

        let mut res = res?;

        let status = res.status();
        let mut res_body: Vec<u8> = vec![];

        while let Some(chunk) = res.body_mut().data().await {
            let mut chunk_vec = chunk.unwrap().to_vec();
            res_body.append(chunk_vec.as_mut());
        }

        //Uncomment to see what went wrong
/*
        let string_result = std::str::from_utf8(&res_body).unwrap();
        let value_result: Result<serde_json::Value, serde_json::Error> = serde_json::from_str(&string_result);
        if let Ok(json_value) = value_result {
            //Valid json, invalid structure, pretty-printed output
            eprintln!("{}", serde_json::to_string_pretty(&json_value).unwrap());
        } else {
            //Invalid json, raw output
            dbg!(&string_result);
        }
*/
        let res_body =
            if status.is_success() {
                Ok(res_body)
            } else {
                Err(Error::from((status, res_body.borrow())))
            };

        let mut res_body = res_body?;

        let res_body =
            serde_json::from_slice(res_body.borrow())
            .map_err(|e| -> Error<serde_json::Value> { Error::from(e) });

        res_body
    }

 ///
 /// Получение информации о позициях выбранного инструмента
 ///
 /// Запрос информации о позициях выбранного инструмента
 ///
 /// # Arguments
 ///
 /// * `exchange` Биржа (required)
 /// 
 /// 
 ///
 /// * `portfolio` Идентификатор клиентского портфеля (required)
 /// Example: portfolio_example
 /// 
 ///
 /// * `symbol` Тикер (Код финансового инструмента) (required)
 /// Example: symbol_example
 /// 
 ///
 /// * `format` Формат возвращаемого сервером JSON (optional)
 /// 
 /// 
 ///
    async fn dev_get_one_position(&self, exchange: crate::models::Exchange, portfolio: &str, symbol: &str, format: Option<crate::models::JsonFormat>) -> Result<Position, Error<serde_json::Value>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let mut auth_headers = HashMap::<String, String>::new();
        let mut auth_query = HashMap::<String, String>::new();
        if let Some(ref token) = configuration.oauth_access_token {
            auth_headers.insert("Authorization".to_owned(), format!("Bearer {}", token));
        }
        let method = hyper::Method::GET;

        let query_string = {
            let mut api_query = ::url::form_urlencoded::Serializer::new(String::new());
            let has_query_params = true;
        if let Some(format) = format {
            api_query.append_pair("format", &format.outline_print());
        }
            for (key, val) in &auth_query {
                api_query.append_pair(key, val);
            }
            if has_query_params || auth_query.len()>0  {
                format!("/?{}", api_query.finish())
            } else {
                "".to_string()
            }
        };
        let uri_str = format!("{}/md/v2/Clients/{exchange}/{portfolio}/positions/{symbol}{}", configuration.base_path, query_string, exchange=exchange.outline_print(), portfolio=portfolio.outline_print(), symbol=symbol.outline_print());

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        //dbg!(&uri_str);

        let uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req =
            hyper::Request::builder()
                .method(method)
                .uri(uri);

        let headers = req.headers_mut().unwrap();

        if let Some(ref user_agent) = configuration.user_agent {
            headers.insert(hyper::header::USER_AGENT, user_agent.parse().unwrap());
        }


        for (key, val) in auth_headers {
            headers.insert(
                hyper::header::HeaderName::from_str(key.as_ref()).unwrap(),
                val.parse().unwrap(),
            );
        }

        let somebody = Body::empty();

        let req = req.body(somebody).unwrap();

        let res = configuration
            .client.request(req)
            .await
            .map_err(|e| -> Error<serde_json::Value> { Error::from(e) });

        let mut res = res?;

        let status = res.status();
        let mut res_body: Vec<u8> = vec![];

        while let Some(chunk) = res.body_mut().data().await {
            let mut chunk_vec = chunk.unwrap().to_vec();
            res_body.append(chunk_vec.as_mut());
        }

        //Uncomment to see what went wrong
/*
        let string_result = std::str::from_utf8(&res_body).unwrap();
        let value_result: Result<serde_json::Value, serde_json::Error> = serde_json::from_str(&string_result);
        if let Ok(json_value) = value_result {
            //Valid json, invalid structure, pretty-printed output
            eprintln!("{}", serde_json::to_string_pretty(&json_value).unwrap());
        } else {
            //Invalid json, raw output
            dbg!(&string_result);
        }
*/
        let res_body =
            if status.is_success() {
                Ok(res_body)
            } else {
                Err(Error::from((status, res_body.borrow())))
            };

        let mut res_body = res_body?;

        let res_body =
            serde_json::from_slice(res_body.borrow())
            .map_err(|e| -> Error<serde_json::Value> { Error::from(e) });

        res_body
    }

 ///
 /// Получение информации о выбранной стоп-заявке
 ///
 /// Запрос информации о выбранной стоп-заявке
 ///
 /// # Arguments
 ///
 /// * `exchange` Биржа (required)
 /// 
 /// 
 ///
 /// * `portfolio` Идентификатор клиентского портфеля (required)
 /// Example: portfolio_example
 /// 
 ///
 /// * `order_id` Идентификатор стоп-заявки (required)
 /// Example: 56
 /// 
 ///
 /// * `format` Формат возвращаемого сервером JSON (optional)
 /// 
 /// 
 ///
    async fn dev_get_one_stop_order(&self, exchange: crate::models::Exchange, portfolio: &str, order_id: i32, format: Option<crate::models::JsonFormat>) -> Result<StoporderWarp, Error<serde_json::Value>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let mut auth_headers = HashMap::<String, String>::new();
        let mut auth_query = HashMap::<String, String>::new();
        if let Some(ref token) = configuration.oauth_access_token {
            auth_headers.insert("Authorization".to_owned(), format!("Bearer {}", token));
        }
        let method = hyper::Method::GET;

        let query_string = {
            let mut api_query = ::url::form_urlencoded::Serializer::new(String::new());
            let has_query_params = true;
        if let Some(format) = format {
            api_query.append_pair("format", &format.outline_print());
        }
            for (key, val) in &auth_query {
                api_query.append_pair(key, val);
            }
            if has_query_params || auth_query.len()>0  {
                format!("/?{}", api_query.finish())
            } else {
                "".to_string()
            }
        };
        let uri_str = format!("{}/md/v2/clients/{exchange}/{portfolio}/stoporders/{orderId}{}", configuration.base_path, query_string, exchange=exchange.outline_print(), portfolio=portfolio.outline_print(), orderId=order_id.outline_print());

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        //dbg!(&uri_str);

        let uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req =
            hyper::Request::builder()
                .method(method)
                .uri(uri);

        let headers = req.headers_mut().unwrap();

        if let Some(ref user_agent) = configuration.user_agent {
            headers.insert(hyper::header::USER_AGENT, user_agent.parse().unwrap());
        }


        for (key, val) in auth_headers {
            headers.insert(
                hyper::header::HeaderName::from_str(key.as_ref()).unwrap(),
                val.parse().unwrap(),
            );
        }

        let somebody = Body::empty();

        let req = req.body(somebody).unwrap();

        let res = configuration
            .client.request(req)
            .await
            .map_err(|e| -> Error<serde_json::Value> { Error::from(e) });

        let mut res = res?;

        let status = res.status();
        let mut res_body: Vec<u8> = vec![];

        while let Some(chunk) = res.body_mut().data().await {
            let mut chunk_vec = chunk.unwrap().to_vec();
            res_body.append(chunk_vec.as_mut());
        }

        //Uncomment to see what went wrong
/*
        let string_result = std::str::from_utf8(&res_body).unwrap();
        let value_result: Result<serde_json::Value, serde_json::Error> = serde_json::from_str(&string_result);
        if let Ok(json_value) = value_result {
            //Valid json, invalid structure, pretty-printed output
            eprintln!("{}", serde_json::to_string_pretty(&json_value).unwrap());
        } else {
            //Invalid json, raw output
            dbg!(&string_result);
        }
*/
        let res_body =
            if status.is_success() {
                Ok(res_body)
            } else {
                Err(Error::from((status, res_body.borrow())))
            };

        let mut res_body = res_body?;

        let res_body =
            serde_json::from_slice(res_body.borrow())
            .map_err(|e| -> Error<serde_json::Value> { Error::from(e) });

        res_body
    }

 ///
 /// Получение информации о сделках по выбранному инструменту
 ///
 /// Запрос информации о сделках по выбранному инструменту
 ///
 /// # Arguments
 ///
 /// * `exchange` Биржа (required)
 /// 
 /// 
 ///
 /// * `portfolio` Идентификатор клиентского портфеля (required)
 /// Example: portfolio_example
 /// 
 ///
 /// * `ticker` Тикер (Код финансового инструмента) (required)
 /// Example: ticker_example
 /// 
 ///
 /// * `format` Формат возвращаемого сервером JSON (optional)
 /// 
 /// 
 ///
    async fn dev_get_ticker_trades(&self, exchange: crate::models::Exchange, portfolio: &str, ticker: &str, format: Option<crate::models::JsonFormat>) -> Result<Vec<Trade>, Error<serde_json::Value>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let mut auth_headers = HashMap::<String, String>::new();
        let mut auth_query = HashMap::<String, String>::new();
        if let Some(ref token) = configuration.oauth_access_token {
            auth_headers.insert("Authorization".to_owned(), format!("Bearer {}", token));
        }
        let method = hyper::Method::GET;

        let query_string = {
            let mut api_query = ::url::form_urlencoded::Serializer::new(String::new());
            let has_query_params = true;
        if let Some(format) = format {
            api_query.append_pair("format", &format.outline_print());
        }
            for (key, val) in &auth_query {
                api_query.append_pair(key, val);
            }
            if has_query_params || auth_query.len()>0  {
                format!("/?{}", api_query.finish())
            } else {
                "".to_string()
            }
        };
        let uri_str = format!("{}/md/v2/Clients/{exchange}/{portfolio}/{ticker}/trades{}", configuration.base_path, query_string, exchange=exchange.outline_print(), portfolio=portfolio.outline_print(), ticker=ticker.outline_print());

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        //dbg!(&uri_str);

        let uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req =
            hyper::Request::builder()
                .method(method)
                .uri(uri);

        let headers = req.headers_mut().unwrap();

        if let Some(ref user_agent) = configuration.user_agent {
            headers.insert(hyper::header::USER_AGENT, user_agent.parse().unwrap());
        }


        for (key, val) in auth_headers {
            headers.insert(
                hyper::header::HeaderName::from_str(key.as_ref()).unwrap(),
                val.parse().unwrap(),
            );
        }

        let somebody = Body::empty();

        let req = req.body(somebody).unwrap();

        let res = configuration
            .client.request(req)
            .await
            .map_err(|e| -> Error<serde_json::Value> { Error::from(e) });

        let mut res = res?;

        let status = res.status();
        let mut res_body: Vec<u8> = vec![];

        while let Some(chunk) = res.body_mut().data().await {
            let mut chunk_vec = chunk.unwrap().to_vec();
            res_body.append(chunk_vec.as_mut());
        }

        //Uncomment to see what went wrong
/*
        let string_result = std::str::from_utf8(&res_body).unwrap();
        let value_result: Result<serde_json::Value, serde_json::Error> = serde_json::from_str(&string_result);
        if let Ok(json_value) = value_result {
            //Valid json, invalid structure, pretty-printed output
            eprintln!("{}", serde_json::to_string_pretty(&json_value).unwrap());
        } else {
            //Invalid json, raw output
            dbg!(&string_result);
        }
*/
        let res_body =
            if status.is_success() {
                Ok(res_body)
            } else {
                Err(Error::from((status, res_body.borrow())))
            };

        let mut res_body = res_body?;

        let res_body =
            serde_json::from_slice(res_body.borrow())
            .map_err(|e| -> Error<serde_json::Value> { Error::from(e) });

        res_body
    }

 ///
 /// Получение списка серверов портфелей
 ///
 /// Получение списка серверов. В ответе в поле tradeServerCode содержится значение которое надо использовать. Не являются частью API торговой системы.
 ///
 /// # Arguments
 ///
 /// * `username` Имя пользователя (required)
 /// Example: username_example
 /// 
 ///
    async fn dev_user_portfolio(&self, username: &str) -> Result<ServersInfo, Error<serde_json::Value>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let mut auth_headers = HashMap::<String, String>::new();
        let mut auth_query = HashMap::<String, String>::new();
        if let Some(ref token) = configuration.oauth_access_token {
            auth_headers.insert("Authorization".to_owned(), format!("Bearer {}", token));
        }
        let method = hyper::Method::GET;

        let query_string = {
            let mut api_query = ::url::form_urlencoded::Serializer::new(String::new());
            let has_query_params = false;
            for (key, val) in &auth_query {
                api_query.append_pair(key, val);
            }
            if has_query_params || auth_query.len()>0  {
                format!("/?{}", api_query.finish())
            } else {
                "".to_string()
            }
        };
        let uri_str = format!("{}/client/v1.0/users/{username}/portfolios{}", configuration.base_path, query_string, username=username.outline_print());

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        //dbg!(&uri_str);

        let uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req =
            hyper::Request::builder()
                .method(method)
                .uri(uri);

        let headers = req.headers_mut().unwrap();

        if let Some(ref user_agent) = configuration.user_agent {
            headers.insert(hyper::header::USER_AGENT, user_agent.parse().unwrap());
        }


        for (key, val) in auth_headers {
            headers.insert(
                hyper::header::HeaderName::from_str(key.as_ref()).unwrap(),
                val.parse().unwrap(),
            );
        }

        let somebody = Body::empty();

        let req = req.body(somebody).unwrap();

        let res = configuration
            .client.request(req)
            .await
            .map_err(|e| -> Error<serde_json::Value> { Error::from(e) });

        let mut res = res?;

        let status = res.status();
        let mut res_body: Vec<u8> = vec![];

        while let Some(chunk) = res.body_mut().data().await {
            let mut chunk_vec = chunk.unwrap().to_vec();
            res_body.append(chunk_vec.as_mut());
        }

        //Uncomment to see what went wrong
/*
        let string_result = std::str::from_utf8(&res_body).unwrap();
        let value_result: Result<serde_json::Value, serde_json::Error> = serde_json::from_str(&string_result);
        if let Ok(json_value) = value_result {
            //Valid json, invalid structure, pretty-printed output
            eprintln!("{}", serde_json::to_string_pretty(&json_value).unwrap());
        } else {
            //Invalid json, raw output
            dbg!(&string_result);
        }
*/
        let res_body =
            if status.is_success() {
                Ok(res_body)
            } else {
                Err(Error::from((status, res_body.borrow())))
            };

        let mut res_body = res_body?;

        let res_body =
            serde_json::from_slice(res_body.borrow())
            .map_err(|e| -> Error<serde_json::Value> { Error::from(e) });

        res_body
    }

 ///
 /// Получение информации по деньгам для выбранного портфеля
 ///
 /// Запрос информации о позиции по деньгам. Вызов существует для обратной совместимости с API v1, предпочтительно использовать другие вызовы (/summary, /risk, /positions)
 ///
 /// # Arguments
 ///
 /// * `exchange` Биржа (required)
 /// 
 /// 
 ///
 /// * `portfolio` Идентификатор клиентского портфеля (required)
 /// Example: portfolio_example
 /// 
 ///
 /// * `format` Формат возвращаемого сервером JSON (optional)
 /// 
 /// 
 ///
    async fn exchange_portfolio_money(&self, exchange: crate::models::Exchange, portfolio: &str, format: Option<crate::models::JsonFormat>) -> Result<Money, Error<serde_json::Value>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let mut auth_headers = HashMap::<String, String>::new();
        let mut auth_query = HashMap::<String, String>::new();
        if let Some(ref token) = configuration.oauth_access_token {
            auth_headers.insert("Authorization".to_owned(), format!("Bearer {}", token));
        }
        let method = hyper::Method::GET;

        let query_string = {
            let mut api_query = ::url::form_urlencoded::Serializer::new(String::new());
            let has_query_params = true;
        if let Some(format) = format {
            api_query.append_pair("format", &format.outline_print());
        }
            for (key, val) in &auth_query {
                api_query.append_pair(key, val);
            }
            if has_query_params || auth_query.len()>0  {
                format!("/?{}", api_query.finish())
            } else {
                "".to_string()
            }
        };
        let uri_str = format!("{}/md/v2/clients/legacy/{exchange}/{portfolio}/money{}", configuration.base_path, query_string, exchange=exchange.outline_print(), portfolio=portfolio.outline_print());

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        //dbg!(&uri_str);

        let uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req =
            hyper::Request::builder()
                .method(method)
                .uri(uri);

        let headers = req.headers_mut().unwrap();

        if let Some(ref user_agent) = configuration.user_agent {
            headers.insert(hyper::header::USER_AGENT, user_agent.parse().unwrap());
        }


        for (key, val) in auth_headers {
            headers.insert(
                hyper::header::HeaderName::from_str(key.as_ref()).unwrap(),
                val.parse().unwrap(),
            );
        }

        let somebody = Body::empty();

        let req = req.body(somebody).unwrap();

        let res = configuration
            .client.request(req)
            .await
            .map_err(|e| -> Error<serde_json::Value> { Error::from(e) });

        let mut res = res?;

        let status = res.status();
        let mut res_body: Vec<u8> = vec![];

        while let Some(chunk) = res.body_mut().data().await {
            let mut chunk_vec = chunk.unwrap().to_vec();
            res_body.append(chunk_vec.as_mut());
        }

        //Uncomment to see what went wrong
/*
        let string_result = std::str::from_utf8(&res_body).unwrap();
        let value_result: Result<serde_json::Value, serde_json::Error> = serde_json::from_str(&string_result);
        if let Ok(json_value) = value_result {
            //Valid json, invalid structure, pretty-printed output
            eprintln!("{}", serde_json::to_string_pretty(&json_value).unwrap());
        } else {
            //Invalid json, raw output
            dbg!(&string_result);
        }
*/
        let res_body =
            if status.is_success() {
                Ok(res_body)
            } else {
                Err(Error::from((status, res_body.borrow())))
            };

        let mut res_body = res_body?;

        let res_body =
            serde_json::from_slice(res_body.borrow())
            .map_err(|e| -> Error<serde_json::Value> { Error::from(e) });

        res_body
    }

 ///
 /// Получение информации о портфеле
 ///
 /// Запрос сводной информации о портфеле
 ///
 /// # Arguments
 ///
 /// * `exchange` Биржа (required)
 /// 
 /// 
 ///
 /// * `portfolio` Идентификатор клиентского портфеля (required)
 /// Example: portfolio_example
 /// 
 ///
 /// * `format` Формат возвращаемого сервером JSON (optional)
 /// 
 /// 
 ///
    async fn exchange_portfolio_summary(&self, exchange: crate::models::Exchange, portfolio: &str, format: Option<crate::models::JsonFormat>) -> Result<Summary, Error<serde_json::Value>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let mut auth_headers = HashMap::<String, String>::new();
        let mut auth_query = HashMap::<String, String>::new();
        if let Some(ref token) = configuration.oauth_access_token {
            auth_headers.insert("Authorization".to_owned(), format!("Bearer {}", token));
        }
        let method = hyper::Method::GET;

        let query_string = {
            let mut api_query = ::url::form_urlencoded::Serializer::new(String::new());
            let has_query_params = true;
        if let Some(format) = format {
            api_query.append_pair("format", &format.outline_print());
        }
            for (key, val) in &auth_query {
                api_query.append_pair(key, val);
            }
            if has_query_params || auth_query.len()>0  {
                format!("/?{}", api_query.finish())
            } else {
                "".to_string()
            }
        };
        let uri_str = format!("{}/md/v2/clients/{exchange}/{portfolio}/summary{}", configuration.base_path, query_string, exchange=exchange.outline_print(), portfolio=portfolio.outline_print());

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        //dbg!(&uri_str);

        let uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req =
            hyper::Request::builder()
                .method(method)
                .uri(uri);

        let headers = req.headers_mut().unwrap();

        if let Some(ref user_agent) = configuration.user_agent {
            headers.insert(hyper::header::USER_AGENT, user_agent.parse().unwrap());
        }


        for (key, val) in auth_headers {
            headers.insert(
                hyper::header::HeaderName::from_str(key.as_ref()).unwrap(),
                val.parse().unwrap(),
            );
        }

        let somebody = Body::empty();

        let req = req.body(somebody).unwrap();

        let res = configuration
            .client.request(req)
            .await
            .map_err(|e| -> Error<serde_json::Value> { Error::from(e) });

        let mut res = res?;

        let status = res.status();
        let mut res_body: Vec<u8> = vec![];

        while let Some(chunk) = res.body_mut().data().await {
            let mut chunk_vec = chunk.unwrap().to_vec();
            res_body.append(chunk_vec.as_mut());
        }

        //Uncomment to see what went wrong
/*
        let string_result = std::str::from_utf8(&res_body).unwrap();
        let value_result: Result<serde_json::Value, serde_json::Error> = serde_json::from_str(&string_result);
        if let Ok(json_value) = value_result {
            //Valid json, invalid structure, pretty-printed output
            eprintln!("{}", serde_json::to_string_pretty(&json_value).unwrap());
        } else {
            //Invalid json, raw output
            dbg!(&string_result);
        }
*/
        let res_body =
            if status.is_success() {
                Ok(res_body)
            } else {
                Err(Error::from((status, res_body.borrow())))
            };

        let mut res_body = res_body?;

        let res_body =
            serde_json::from_slice(res_body.borrow())
            .map_err(|e| -> Error<serde_json::Value> { Error::from(e) });

        res_body
    }

 ///
 /// Получение информации о рисках на срочном рынке
 ///
 /// Запрос информации о рисках на срочном рынке для выбранного портфеля
 ///
 /// # Arguments
 ///
 /// * `exchange` Биржа (required)
 /// 
 /// 
 ///
 /// * `portfolio` Идентификатор клиентского портфеля (required)
 /// Example: portfolio_example
 /// 
 ///
 /// * `format` Формат возвращаемого сервером JSON (optional)
 /// 
 /// 
 ///
    async fn fortsrisk(&self, exchange: crate::models::Exchange, portfolio: &str, format: Option<crate::models::JsonFormat>) -> Result<Fortsrisk, Error<serde_json::Value>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let mut auth_headers = HashMap::<String, String>::new();
        let mut auth_query = HashMap::<String, String>::new();
        if let Some(ref token) = configuration.oauth_access_token {
            auth_headers.insert("Authorization".to_owned(), format!("Bearer {}", token));
        }
        let method = hyper::Method::GET;

        let query_string = {
            let mut api_query = ::url::form_urlencoded::Serializer::new(String::new());
            let has_query_params = true;
        if let Some(format) = format {
            api_query.append_pair("format", &format.outline_print());
        }
            for (key, val) in &auth_query {
                api_query.append_pair(key, val);
            }
            if has_query_params || auth_query.len()>0  {
                format!("/?{}", api_query.finish())
            } else {
                "".to_string()
            }
        };
        let uri_str = format!("{}/md/v2/Clients/{exchange}/{portfolio}/fortsrisk{}", configuration.base_path, query_string, exchange=exchange.outline_print(), portfolio=portfolio.outline_print());

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        //dbg!(&uri_str);

        let uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req =
            hyper::Request::builder()
                .method(method)
                .uri(uri);

        let headers = req.headers_mut().unwrap();

        if let Some(ref user_agent) = configuration.user_agent {
            headers.insert(hyper::header::USER_AGENT, user_agent.parse().unwrap());
        }


        for (key, val) in auth_headers {
            headers.insert(
                hyper::header::HeaderName::from_str(key.as_ref()).unwrap(),
                val.parse().unwrap(),
            );
        }

        let somebody = Body::empty();

        let req = req.body(somebody).unwrap();

        let res = configuration
            .client.request(req)
            .await
            .map_err(|e| -> Error<serde_json::Value> { Error::from(e) });

        let mut res = res?;

        let status = res.status();
        let mut res_body: Vec<u8> = vec![];

        while let Some(chunk) = res.body_mut().data().await {
            let mut chunk_vec = chunk.unwrap().to_vec();
            res_body.append(chunk_vec.as_mut());
        }

        //Uncomment to see what went wrong
/*
        let string_result = std::str::from_utf8(&res_body).unwrap();
        let value_result: Result<serde_json::Value, serde_json::Error> = serde_json::from_str(&string_result);
        if let Ok(json_value) = value_result {
            //Valid json, invalid structure, pretty-printed output
            eprintln!("{}", serde_json::to_string_pretty(&json_value).unwrap());
        } else {
            //Invalid json, raw output
            dbg!(&string_result);
        }
*/
        let res_body =
            if status.is_success() {
                Ok(res_body)
            } else {
                Err(Error::from((status, res_body.borrow())))
            };

        let mut res_body = res_body?;

        let res_body =
            serde_json::from_slice(res_body.borrow())
            .map_err(|e| -> Error<serde_json::Value> { Error::from(e) });

        res_body
    }

 ///
 /// Получение информации о рисках
 ///
 /// Запрос информации о рисках
 ///
 /// # Arguments
 ///
 /// * `exchange` Биржа (required)
 /// 
 /// 
 ///
 /// * `portfolio` Идентификатор клиентского портфеля (required)
 /// Example: portfolio_example
 /// 
 ///
 /// * `format` Формат возвращаемого сервером JSON (optional)
 /// 
 /// 
 ///
    async fn risk(&self, exchange: crate::models::Exchange, portfolio: &str, format: Option<crate::models::JsonFormat>) -> Result<Risk, Error<serde_json::Value>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let mut auth_headers = HashMap::<String, String>::new();
        let mut auth_query = HashMap::<String, String>::new();
        if let Some(ref token) = configuration.oauth_access_token {
            auth_headers.insert("Authorization".to_owned(), format!("Bearer {}", token));
        }
        let method = hyper::Method::GET;

        let query_string = {
            let mut api_query = ::url::form_urlencoded::Serializer::new(String::new());
            let has_query_params = true;
        if let Some(format) = format {
            api_query.append_pair("format", &format.outline_print());
        }
            for (key, val) in &auth_query {
                api_query.append_pair(key, val);
            }
            if has_query_params || auth_query.len()>0  {
                format!("/?{}", api_query.finish())
            } else {
                "".to_string()
            }
        };
        let uri_str = format!("{}/md/v2/Clients/{exchange}/{portfolio}/risk{}", configuration.base_path, query_string, exchange=exchange.outline_print(), portfolio=portfolio.outline_print());

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        //dbg!(&uri_str);

        let uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req =
            hyper::Request::builder()
                .method(method)
                .uri(uri);

        let headers = req.headers_mut().unwrap();

        if let Some(ref user_agent) = configuration.user_agent {
            headers.insert(hyper::header::USER_AGENT, user_agent.parse().unwrap());
        }


        for (key, val) in auth_headers {
            headers.insert(
                hyper::header::HeaderName::from_str(key.as_ref()).unwrap(),
                val.parse().unwrap(),
            );
        }

        let somebody = Body::empty();

        let req = req.body(somebody).unwrap();

        let res = configuration
            .client.request(req)
            .await
            .map_err(|e| -> Error<serde_json::Value> { Error::from(e) });

        let mut res = res?;

        let status = res.status();
        let mut res_body: Vec<u8> = vec![];

        while let Some(chunk) = res.body_mut().data().await {
            let mut chunk_vec = chunk.unwrap().to_vec();
            res_body.append(chunk_vec.as_mut());
        }

        //Uncomment to see what went wrong
/*
        let string_result = std::str::from_utf8(&res_body).unwrap();
        let value_result: Result<serde_json::Value, serde_json::Error> = serde_json::from_str(&string_result);
        if let Ok(json_value) = value_result {
            //Valid json, invalid structure, pretty-printed output
            eprintln!("{}", serde_json::to_string_pretty(&json_value).unwrap());
        } else {
            //Invalid json, raw output
            dbg!(&string_result);
        }
*/
        let res_body =
            if status.is_success() {
                Ok(res_body)
            } else {
                Err(Error::from((status, res_body.borrow())))
            };

        let mut res_body = res_body?;

        let res_body =
            serde_json::from_slice(res_body.borrow())
            .map_err(|e| -> Error<serde_json::Value> { Error::from(e) });

        res_body
    }

 ///
 /// Получение истории сделок
 ///
 /// Запрос списка сделок за предыдущие дни (не более 1000 сделок за один запрос)
 ///
 /// # Arguments
 ///
 /// * `exchange` Биржа (required)
 /// 
 /// 
 ///
 /// * `portfolio` Идентификатор клиентского портфеля (required)
 /// Example: portfolio_example
 /// 
 ///
 /// * `date_from` Начиная с какой даты отдавать историю сделок (optional)
 /// Example: 2013-10-20
 /// 
 ///
 /// * `from` Начиная с какого ID (номера сделки) отдавать историю сделок (optional)
 /// Example: from_example
 /// 
 ///
 /// * `limit` Количество возвращаемых записей (максимум 1000) (optional)
 /// Example: 56
 /// 
 ///
 /// * `descending` Флаг обратной сортировки выдачи (optional)
 /// Example: true
 /// 
 ///
 /// * `format` Формат возвращаемого сервером JSON (optional)
 /// 
 /// 
 ///
    async fn trade_stats(&self, exchange: crate::models::Exchange, portfolio: &str, date_from: Option<NaiveDate>, from: Option<&str>, limit: Option<i32>, descending: Option<bool>, format: Option<crate::models::JsonFormat>) -> Result<Vec<Trade>, Error<serde_json::Value>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let mut auth_headers = HashMap::<String, String>::new();
        let mut auth_query = HashMap::<String, String>::new();
        if let Some(ref token) = configuration.oauth_access_token {
            auth_headers.insert("Authorization".to_owned(), format!("Bearer {}", token));
        }
        let method = hyper::Method::GET;

        let query_string = {
            let mut api_query = ::url::form_urlencoded::Serializer::new(String::new());
            let has_query_params = true;
        if let Some(date_from) = date_from {
            api_query.append_pair("dateFrom", &date_from.outline_print() );
        }
        if let Some(from) = from {
            api_query.append_pair("from", &from.outline_print() );
        }
        if let Some(limit) = limit {
            api_query.append_pair("limit", &limit.outline_print() );
        }
        if let Some(descending) = descending {
            api_query.append_pair("descending", &descending.outline_print() );
        }
        if let Some(format) = format {
            api_query.append_pair("format", &format.outline_print());
        }
            for (key, val) in &auth_query {
                api_query.append_pair(key, val);
            }
            if has_query_params || auth_query.len()>0  {
                format!("/?{}", api_query.finish())
            } else {
                "".to_string()
            }
        };
        let uri_str = format!("{}/md/stats/{exchange}/{portfolio}/history/trades{}", configuration.base_path, query_string, exchange=exchange.outline_print(), portfolio=portfolio.outline_print());

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        //dbg!(&uri_str);

        let uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req =
            hyper::Request::builder()
                .method(method)
                .uri(uri);

        let headers = req.headers_mut().unwrap();

        if let Some(ref user_agent) = configuration.user_agent {
            headers.insert(hyper::header::USER_AGENT, user_agent.parse().unwrap());
        }


        for (key, val) in auth_headers {
            headers.insert(
                hyper::header::HeaderName::from_str(key.as_ref()).unwrap(),
                val.parse().unwrap(),
            );
        }

        let somebody = Body::empty();

        let req = req.body(somebody).unwrap();

        let res = configuration
            .client.request(req)
            .await
            .map_err(|e| -> Error<serde_json::Value> { Error::from(e) });

        let mut res = res?;

        let status = res.status();
        let mut res_body: Vec<u8> = vec![];

        while let Some(chunk) = res.body_mut().data().await {
            let mut chunk_vec = chunk.unwrap().to_vec();
            res_body.append(chunk_vec.as_mut());
        }

        //Uncomment to see what went wrong
/*
        let string_result = std::str::from_utf8(&res_body).unwrap();
        let value_result: Result<serde_json::Value, serde_json::Error> = serde_json::from_str(&string_result);
        if let Ok(json_value) = value_result {
            //Valid json, invalid structure, pretty-printed output
            eprintln!("{}", serde_json::to_string_pretty(&json_value).unwrap());
        } else {
            //Invalid json, raw output
            dbg!(&string_result);
        }
*/
        let res_body =
            if status.is_success() {
                Ok(res_body)
            } else {
                Err(Error::from((status, res_body.borrow())))
            };

        let mut res_body = res_body?;

        let res_body =
            serde_json::from_slice(res_body.borrow())
            .map_err(|e| -> Error<serde_json::Value> { Error::from(e) });

        res_body
    }

 ///
 /// Получение истории сделок (один тикер)
 ///
 /// Запрос списка сделок за предыдущие дни (не более 1000 сделок за один запрос) по одному инструменту. 
 ///
 /// # Arguments
 ///
 /// * `exchange` Биржа (required)
 /// 
 /// 
 ///
 /// * `portfolio` Идентификатор клиентского портфеля (required)
 /// Example: portfolio_example
 /// 
 ///
 /// * `symbol` Фильтр по инструменту (required)
 /// Example: symbol_example
 /// 
 ///
 /// * `date_from` Начиная с какой даты отдавать историю сделок (optional)
 /// Example: 2013-10-20
 /// 
 ///
 /// * `from` Начиная с какого ID (номера сделки) отдавать историю сделок (optional)
 /// Example: from_example
 /// 
 ///
 /// * `limit` Количество возвращаемых записей (максимум 1000) (optional)
 /// Example: 56
 /// 
 ///
 /// * `descending` Флаг обратной сортировки выдачи (optional)
 /// Example: true
 /// 
 ///
 /// * `format` Формат возвращаемого сервером JSON (optional)
 /// 
 /// 
 ///
    async fn trade_stats_by_symbol(&self, exchange: crate::models::Exchange, portfolio: &str, symbol: &str, date_from: Option<NaiveDate>, from: Option<&str>, limit: Option<i32>, descending: Option<bool>, format: Option<crate::models::JsonFormat>) -> Result<Vec<Trade>, Error<serde_json::Value>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let mut auth_headers = HashMap::<String, String>::new();
        let mut auth_query = HashMap::<String, String>::new();
        if let Some(ref token) = configuration.oauth_access_token {
            auth_headers.insert("Authorization".to_owned(), format!("Bearer {}", token));
        }
        let method = hyper::Method::GET;

        let query_string = {
            let mut api_query = ::url::form_urlencoded::Serializer::new(String::new());
            let has_query_params = true;
        if let Some(date_from) = date_from {
            api_query.append_pair("dateFrom", &date_from.outline_print() );
        }
        if let Some(from) = from {
            api_query.append_pair("from", &from.outline_print() );
        }
        if let Some(limit) = limit {
            api_query.append_pair("limit", &limit.outline_print() );
        }
        if let Some(descending) = descending {
            api_query.append_pair("descending", &descending.outline_print() );
        }
        if let Some(format) = format {
            api_query.append_pair("format", &format.outline_print());
        }
            for (key, val) in &auth_query {
                api_query.append_pair(key, val);
            }
            if has_query_params || auth_query.len()>0  {
                format!("/?{}", api_query.finish())
            } else {
                "".to_string()
            }
        };
        let uri_str = format!("{}/md/stats/{exchange}/{portfolio}/history/trades/{symbol}{}", configuration.base_path, query_string, exchange=exchange.outline_print(), portfolio=portfolio.outline_print(), symbol=symbol.outline_print());

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        //dbg!(&uri_str);

        let uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req =
            hyper::Request::builder()
                .method(method)
                .uri(uri);

        let headers = req.headers_mut().unwrap();

        if let Some(ref user_agent) = configuration.user_agent {
            headers.insert(hyper::header::USER_AGENT, user_agent.parse().unwrap());
        }


        for (key, val) in auth_headers {
            headers.insert(
                hyper::header::HeaderName::from_str(key.as_ref()).unwrap(),
                val.parse().unwrap(),
            );
        }

        let somebody = Body::empty();

        let req = req.body(somebody).unwrap();

        let res = configuration
            .client.request(req)
            .await
            .map_err(|e| -> Error<serde_json::Value> { Error::from(e) });

        let mut res = res?;

        let status = res.status();
        let mut res_body: Vec<u8> = vec![];

        while let Some(chunk) = res.body_mut().data().await {
            let mut chunk_vec = chunk.unwrap().to_vec();
            res_body.append(chunk_vec.as_mut());
        }

        //Uncomment to see what went wrong
/*
        let string_result = std::str::from_utf8(&res_body).unwrap();
        let value_result: Result<serde_json::Value, serde_json::Error> = serde_json::from_str(&string_result);
        if let Ok(json_value) = value_result {
            //Valid json, invalid structure, pretty-printed output
            eprintln!("{}", serde_json::to_string_pretty(&json_value).unwrap());
        } else {
            //Invalid json, raw output
            dbg!(&string_result);
        }
*/
        let res_body =
            if status.is_success() {
                Ok(res_body)
            } else {
                Err(Error::from((status, res_body.borrow())))
            };

        let mut res_body = res_body?;

        let res_body =
            serde_json::from_slice(res_body.borrow())
            .map_err(|e| -> Error<serde_json::Value> { Error::from(e) });

        res_body
    }

}
