/* 
 * Alor OpenAPI V2
 *
 * API для работы с торговой системой АЛОР Брокер. Предоставляет интерфейсы для выставления заявок и получения биржевой информации.  Данные для неавторизованных запросов предоставляются с задержкой от 15 минут, для авторизованных - без задержек.   Публичная биржевая информация может быть получена через HTTP(S) API, а также доступна через однократно установленное WebSocket соединение.  **Внимание!** WebSocket соединения могут и будут разрываться *(например, если клиент не успевает обрабатывать сообщения и на стороне API в буфере накопится более 5000 событий)*.  Во внешнем ПО необходимо предусмотреть механизмы переподключения и переподписки (при необходимости)!  В OpenAPI V2 доступны \"Московская Биржа\" (MOEX) и \"Биржа СПБ\" (SPBX).   ### Доступные типы данных * Все сделки * Все заявки * Информация по инструментам * Котировки * Биржевые стаканы * Исторические данные * Позиции * Информация о клиенте  ### Поддерживаемые виды заявок  * рыночные  * лимитные  * стоп-лосс  * тейк-профит  * стоп-лосс лимит  * тейк-профит лимит  ### Ограничения по частоте запросов На текущий момент ограничений по количеству запросов в минуту нет, однако есть ограничение на общее количество подписок (сотни тысяч). При достижении лимита подписок клиент будет заблокирован и в течение нескольких минут не сможет создавать новые подписки. Уже существующие подписки продолжат работать. Сервер может обрабатывать \"тяжелые\" запросы (пример - история за все время) и запросы без авторизации с меньшим приоритетом.  ### Получение списка портфелей Получить список доступных портфелей можно из JWT токена Для получения списка доступных портфелей необходимо декодировать JWT токен. Портфели находятся в поле **portfolios**.  ## Авторизация  ### OAuth  **Внимание!** JWT и refresh token — равносильны логину и паролю. Их нужно скрывать от публичного доступа.  ### Для разработчиков сторонних приложений, в которых торговлю будут вести их пользователи.  Мы предоставляем сервис для авторизации сторониих приложений по стандарту OAuth 2.0. С примером приложения, использующего OAuth сервис для авторизации пользователей можно ознакомиться в разделе [Примеры](https://alor.dev/examples).  Список разрешений (scopes), которые могут быть выданы приложению: <table>   <tr>     <td><b>OrdersRead</b></td>     <td>Чтение выставленных заявок</td>   </tr>   <tr>     <td><b>OrdersCreate</b></td>     <td>Выставление заявок</td>   </tr>   <tr>     <td><b>Trades</b></td>     <td>Чтение совершенных сделок</td>   </tr>   <tr>     <td><b>Personal</b></td>     <td>Персональная информация: ФИО, почта и т.п.</td>   </tr>   <tr>     <td><b>Stats</b></td>     <td>Статистика: прибыль, средние цены и т.п.</td>   </tr> </table>  ### Для ведения операций от своего имени  Выписать себе **refresh token** для ведения операций от своего имени [можно здесь](https://alor.dev/open-api-tokens).  ## Краткое описание работы с авторизацией  Чтобы выполнить авторизованный запрос, добавьте в запрос заголовок с именем \"Authorization\" и значением, состоящим из префикса `\"Bearer \"` и валидного JWT токена.  Срок жизни JWT короткий: это сделано для безопасности.  Для большинства вариантов использования API мы рекоммендуем использовать механизм  **refresh token**.  Механизм  **refresh token**  позволяет получать JWT с новым сроком жизни. Для этого отправьте POST запрос на адрес `https://oauthdev.alor.ru/refresh?token={refreshToken}` *(тестовый контур)* или `https://oauth.alor.ru/refresh?token={refreshToken}` *(боевой контур)*. Если у **refresh token**  не истек срок жизни и не он не был отозван, то в теле ответа в поле AccessToken вернётся свежий JWT токен.   Срок жизни  **refresh token**, получаемого обычным способом — 1 месяц.   Срок жизни  **refresh token**, получаемого самостоятельным выписыванием — год.   ---   Если мы для вас не завели портфели для ведения торговли в игровом контуре, оставьте заявку на [openapi@alor.ru](mailto:openapi@alor.ru) или свяжитесь с нами в [телеграме](https://t.me/AlorOpenAPI).   Тестовый контур: `https://apidev.alor.ru`   Боевой контур: `https://api.alor.ru`   --- 
 *
 * OpenAPI spec version: 1.0
 * Contact: openapi@alor.ru
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
#![allow(unused_imports)]

use serde_json::Value;
use rust_decimal::Decimal;
use chrono::{NaiveDateTime, NaiveDate, DateTime, FixedOffset, Utc};

use crate::OutlinePrint;
use crate::models::*;
use crate::date_serializer;
use crate::date_serializer_opt;
use crate::serialize_quoted_numbers;
use crate::serialize_quoted_numbers_opt;
//Uncomment this to deal with limited rfc support on server side
//use crate::datetime_serializer::*;

#[derive(Debug, Serialize, Deserialize, PartialEq, Clone)]
pub struct Order {
  #[serde(rename = "brokerSymbol")]
  ///Пара Биржа:Тикер
  broker_symbol: String,  // MOEX:LKOH 
  #[serde(rename = "comment")]
  ///Пользовательский комментарий к заявке
  comment: String,  // Первая заявка 
  #[serde(rename = "endTime")]
  //Uncomment this also to deal with limited rfc support on server side
  //#[serde(serialize_with = "serialize_dt", deserialize_with = "deserialize_dt")]
  ///Дата и время завершения (UTC)
  end_time: DateTime<Utc>, 
  #[serde(rename = "exchange")]
  
  exchange: Exchange, 
  #[serde(rename = "existing")]
  ///`True` - для данных из \"снепшота\", то есть из истории. `False` - для новых событий
  existing: bool,  // false 
  #[serde(rename = "filled")]
  ///Количество исполненных (лоты)
  filled: Decimal,  // 1 
  #[serde(rename = "filledQtyBatch")]
  ///Количество исполненных (лоты)
  filled_qty_batch: Decimal,  // 1 
  #[serde(rename = "filledQtyUnits")]
  ///Количество исполненных (штуки)
  filled_qty_units: Decimal,  // 10 
  #[serde(rename = "id")]
  ///Уникальный идентификатор заявки
  id: String,  // 18995978560 
  #[serde(rename = "portfolio")]
  ///Идентификатор клиентского портфеля
  portfolio: String,  // D39004 
  #[serde(rename = "price")]
  ///Цена
  price: Decimal,  // 142.52 
  #[serde(rename = "qty")]
  ///Количество (лоты)
  qty: i32,  // 1 
  #[serde(rename = "qtyBatch")]
  ///Количество (лоты)
  qty_batch: i32,  // 1 
  #[serde(rename = "qtyUnits")]
  ///Количество (штуки)
  qty_units: i32,  // 1 
  #[serde(rename = "side")]
  
  side: Side, 
  #[serde(rename = "status")]
  
  status: OrderStatus, 
  #[serde(rename = "symbol")]
  ///Тикер (Код финансового инструмента)
  symbol: String,  // SBER 
  #[serde(rename = "timeInForce")]
  
  time_in_force: LifePolicy, 
  #[serde(rename = "transTime")]
  //Uncomment this also to deal with limited rfc support on server side
  //#[serde(serialize_with = "serialize_dt", deserialize_with = "deserialize_dt")]
  ///Дата и время выставления (UTC)
  trans_time: DateTime<Utc>, 
  #[serde(rename = "type")]
  
  rtype: OrderType, 
  #[serde(rename = "volume")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[serde(default)]
  ///Объем, для рыночных заявок - null
  volume: Option<Decimal>  // 2086.3 
}

impl Order {
  pub fn new(broker_symbol: String, comment: String, end_time: DateTime<Utc>, exchange: Exchange, existing: bool, filled: Decimal, filled_qty_batch: Decimal, filled_qty_units: Decimal, id: String, portfolio: String, price: Decimal, qty: i32, qty_batch: i32, qty_units: i32, side: Side, status: OrderStatus, symbol: String, time_in_force: LifePolicy, trans_time: DateTime<Utc>, rtype: OrderType, ) -> Order {
    Order {
      broker_symbol: broker_symbol,
      comment: comment,
      end_time: end_time,
      exchange: exchange,
      existing: existing,
      filled: filled,
      filled_qty_batch: filled_qty_batch,
      filled_qty_units: filled_qty_units,
      id: id,
      portfolio: portfolio,
      price: price,
      qty: qty,
      qty_batch: qty_batch,
      qty_units: qty_units,
      side: side,
      status: status,
      symbol: symbol,
      time_in_force: time_in_force,
      trans_time: trans_time,
      rtype: rtype,
      volume: None
    }
  }

  pub fn set_broker_symbol(&mut self, broker_symbol: String) {
    self.broker_symbol = broker_symbol;
  }

  pub fn with_broker_symbol(mut self, broker_symbol: String) -> Order {
    self.broker_symbol = broker_symbol;
    self
  }
  ///Пара Биржа:Тикер
  pub fn broker_symbol(&self) -> &String {
    &self.broker_symbol
  }


  pub fn set_comment(&mut self, comment: String) {
    self.comment = comment;
  }

  pub fn with_comment(mut self, comment: String) -> Order {
    self.comment = comment;
    self
  }
  ///Пользовательский комментарий к заявке
  pub fn comment(&self) -> &String {
    &self.comment
  }


  pub fn set_end_time(&mut self, end_time: DateTime<Utc>) {
    self.end_time = end_time;
  }

  pub fn with_end_time(mut self, end_time: DateTime<Utc>) -> Order {
    self.end_time = end_time;
    self
  }
  ///Дата и время завершения (UTC)
  pub fn end_time(&self) -> &DateTime<Utc> {
    &self.end_time
  }


  pub fn set_exchange(&mut self, exchange: Exchange) {
    self.exchange = exchange;
  }

  pub fn with_exchange(mut self, exchange: Exchange) -> Order {
    self.exchange = exchange;
    self
  }
  
  pub fn exchange(&self) -> &Exchange {
    &self.exchange
  }


  pub fn set_existing(&mut self, existing: bool) {
    self.existing = existing;
  }

  pub fn with_existing(mut self, existing: bool) -> Order {
    self.existing = existing;
    self
  }
  ///`True` - для данных из \"снепшота\", то есть из истории. `False` - для новых событий
  pub fn existing(&self) -> &bool {
    &self.existing
  }


  pub fn set_filled(&mut self, filled: Decimal) {
    self.filled = filled;
  }

  pub fn with_filled(mut self, filled: Decimal) -> Order {
    self.filled = filled;
    self
  }
  ///Количество исполненных (лоты)
  pub fn filled(&self) -> &Decimal {
    &self.filled
  }


  pub fn set_filled_qty_batch(&mut self, filled_qty_batch: Decimal) {
    self.filled_qty_batch = filled_qty_batch;
  }

  pub fn with_filled_qty_batch(mut self, filled_qty_batch: Decimal) -> Order {
    self.filled_qty_batch = filled_qty_batch;
    self
  }
  ///Количество исполненных (лоты)
  pub fn filled_qty_batch(&self) -> &Decimal {
    &self.filled_qty_batch
  }


  pub fn set_filled_qty_units(&mut self, filled_qty_units: Decimal) {
    self.filled_qty_units = filled_qty_units;
  }

  pub fn with_filled_qty_units(mut self, filled_qty_units: Decimal) -> Order {
    self.filled_qty_units = filled_qty_units;
    self
  }
  ///Количество исполненных (штуки)
  pub fn filled_qty_units(&self) -> &Decimal {
    &self.filled_qty_units
  }


  pub fn set_id(&mut self, id: String) {
    self.id = id;
  }

  pub fn with_id(mut self, id: String) -> Order {
    self.id = id;
    self
  }
  ///Уникальный идентификатор заявки
  pub fn id(&self) -> &String {
    &self.id
  }


  pub fn set_portfolio(&mut self, portfolio: String) {
    self.portfolio = portfolio;
  }

  pub fn with_portfolio(mut self, portfolio: String) -> Order {
    self.portfolio = portfolio;
    self
  }
  ///Идентификатор клиентского портфеля
  pub fn portfolio(&self) -> &String {
    &self.portfolio
  }


  pub fn set_price(&mut self, price: Decimal) {
    self.price = price;
  }

  pub fn with_price(mut self, price: Decimal) -> Order {
    self.price = price;
    self
  }
  ///Цена
  pub fn price(&self) -> &Decimal {
    &self.price
  }


  pub fn set_qty(&mut self, qty: i32) {
    self.qty = qty;
  }

  pub fn with_qty(mut self, qty: i32) -> Order {
    self.qty = qty;
    self
  }
  ///Количество (лоты)
  pub fn qty(&self) -> &i32 {
    &self.qty
  }


  pub fn set_qty_batch(&mut self, qty_batch: i32) {
    self.qty_batch = qty_batch;
  }

  pub fn with_qty_batch(mut self, qty_batch: i32) -> Order {
    self.qty_batch = qty_batch;
    self
  }
  ///Количество (лоты)
  pub fn qty_batch(&self) -> &i32 {
    &self.qty_batch
  }


  pub fn set_qty_units(&mut self, qty_units: i32) {
    self.qty_units = qty_units;
  }

  pub fn with_qty_units(mut self, qty_units: i32) -> Order {
    self.qty_units = qty_units;
    self
  }
  ///Количество (штуки)
  pub fn qty_units(&self) -> &i32 {
    &self.qty_units
  }


  pub fn set_side(&mut self, side: Side) {
    self.side = side;
  }

  pub fn with_side(mut self, side: Side) -> Order {
    self.side = side;
    self
  }
  
  pub fn side(&self) -> &Side {
    &self.side
  }


  pub fn set_status(&mut self, status: OrderStatus) {
    self.status = status;
  }

  pub fn with_status(mut self, status: OrderStatus) -> Order {
    self.status = status;
    self
  }
  
  pub fn status(&self) -> &OrderStatus {
    &self.status
  }


  pub fn set_symbol(&mut self, symbol: String) {
    self.symbol = symbol;
  }

  pub fn with_symbol(mut self, symbol: String) -> Order {
    self.symbol = symbol;
    self
  }
  ///Тикер (Код финансового инструмента)
  pub fn symbol(&self) -> &String {
    &self.symbol
  }


  pub fn set_time_in_force(&mut self, time_in_force: LifePolicy) {
    self.time_in_force = time_in_force;
  }

  pub fn with_time_in_force(mut self, time_in_force: LifePolicy) -> Order {
    self.time_in_force = time_in_force;
    self
  }
  
  pub fn time_in_force(&self) -> &LifePolicy {
    &self.time_in_force
  }


  pub fn set_trans_time(&mut self, trans_time: DateTime<Utc>) {
    self.trans_time = trans_time;
  }

  pub fn with_trans_time(mut self, trans_time: DateTime<Utc>) -> Order {
    self.trans_time = trans_time;
    self
  }
  ///Дата и время выставления (UTC)
  pub fn trans_time(&self) -> &DateTime<Utc> {
    &self.trans_time
  }


  pub fn set_rtype(&mut self, rtype: OrderType) {
    self.rtype = rtype;
  }

  pub fn with_rtype(mut self, rtype: OrderType) -> Order {
    self.rtype = rtype;
    self
  }
  
  pub fn rtype(&self) -> &OrderType {
    &self.rtype
  }


  pub fn set_volume(&mut self, volume: Decimal) {
    self.volume = Some(volume);
  }

  pub fn with_volume(mut self, volume: Decimal) -> Order {
    self.volume = Some(volume);
    self
  }
  ///Объем, для рыночных заявок - null
  pub fn volume(&self) -> Option<&Decimal> {
    self.volume.as_ref()
  }

  pub fn reset_volume(&mut self) {
    self.volume = None;
  }


  pub fn validate(&self) {
  }

}


