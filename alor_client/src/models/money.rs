/* 
 * Alor OpenAPI V2
 *
 * API для работы с торговой системой АЛОР Брокер. Предоставляет интерфейсы для выставления заявок и получения биржевой информации.  Данные для неавторизованных запросов предоставляются с задержкой от 15 минут, для авторизованных - без задержек.   Публичная биржевая информация может быть получена через HTTP(S) API, а также доступна через однократно установленное WebSocket соединение. <br> **Внимание!** WebSocket соединения могут и будут разрываться *(например, если клиент не успевает обрабатывать сообщения и на стороне API в буфере накопится более 5000 событий)*. <br> Во внешнем ПО необходимо предусмотреть механизмы переподключения и переподписки (при необходимости)! <br> <br>  В OpenAPI V2 доступны \"Московская Биржа\" (MOEX) и \"Биржа СПБ\" (SPBX).   <h4> Доступные типы данных </h4>  * Все сделки  * Все заявки  * Информация по инструментам  * Котировки  * Биржевые стаканы  * Исторические данные  * Позиции  * Информация о клиенте  <h4>Поддерживаемые виды заявок</h4>  * рыночные  * лимитные  * стоп-лосс  * тейк-профит  * стоп-лосс лимит  * тейк-профит лимит  <h4>    Ограничения по частоте запросов     </h4> <p>На текущий момент ограничений по количеству запросов в минуту нет, однако есть ограничение на общее количество подписок (сотни тысяч). При достижении лимита подписок клиент будет заблокирован и в течение нескольких минут не сможет создавать новые подписки. Уже существующие подписки продолжат работать. <br/>  Сервер может обрабатывать \"тяжелые\" запросы (пример - история за все время) и запросы без авторизации с меньшим приоритетом.<br/> <br/></p>   <h2> Авторизация </h2>  <h4>OAuth</h4>  <b>Внимание!</b>   JWT и refresh token — равносильны логину и паролю. Их нужно скрывать от публичного доступа.  <h4>Для разработчиков сторонних приложений, в которых торговлю будут вести их пользователи.</h4>  Мы предоставляем сервис для авторизации сторониих приложений по стандарту OAuth 2.0. С примером приложения, использующего OAuth сервис для авторизации пользователей можно ознакомиться в разделе  <a href=\"/examples\">Примеры</a>.  Список разрешений (scopes), которые могут быть выданы приложению: <table>   <tr>     <td><b>OrdersRead</b></td>     <td>Чтение выставленных заявок</td>   </tr>   <tr>     <td><b>OrdersCreate</b></td>     <td>Выставление заявок</td>   </tr>   <tr>     <td><b>Trades</b></td>     <td>Чтение совершенных сделок</td>   </tr>   <tr>     <td><b>Personal</b></td>     <td>Персональная информация: ФИО, почта и т.п.</td>   </tr>   <tr>     <td><b>Stats</b></td>     <td>Статистика: прибыль, средние цены и т.п.</td>   </tr> </table>  <h4>Для ведения операций от своего имени</h4>  Выписать себе <b>refresh token</b> для ведения операций от своего имени [можно здесь](https://alor.dev/open-api-tokens).  <h2>Краткое описание работы с авторизацией</h2>  Чтобы выполнить авторизованный запрос, добавьте в запрос заголовок с именем \"Authorization\" и значением, состоящим из префикса `\"Bearer \"` и валидного JWT токена.  Срок жизни JWT короткий: это сделано для безопасности.  Для большинства вариантов использования API мы рекоммендуем использовать механизм  <b>refresh token</b> .  Механизм  <b>refresh token</b>  позволяет получать JWT с новым сроком жизни. Для этого отправьте POST запрос на адрес `https://oauthdev.alor.ru/refresh?token={refreshToken}` *(тестовый контур)* или `https://oauth.alor.ru/refresh?token={refreshToken}` *(боевой контур)*. Если у  <b>refresh token</b>  не истек срок жизни и не он не был отозван, то в теле ответа в поле AccessToken вернётся свежий JWT токен.   Срок жизни  <b>refresh token</b>, получаемого обычным способом — 1 месяц.   Срок жизни  <b>refresh token</b>, получаемого самостоятельным выписыванием — год.  | |-  > Если мы для вас не завели портфели для ведения торговли в игровом контуре, оставьте заявку на <a href=\"mailto:openapi@alor.ru\">openapi@alor.ru</a> или свяжитесь с нами в [телеграме](https://t.me/AlorOpenAPI).  </br></br> Тестовый контур: `https://apidev.alor.ru`  Боевой контур: `https://api.alor.ru` 
 *
 * OpenAPI spec version: 1.0
 * Contact: openapi@alor.ru
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
#![allow(unused_imports)]

use serde_json::Value;
use rust_decimal::Decimal;
use chrono::{NaiveDateTime, NaiveDate, DateTime, FixedOffset, Utc};

use crate::OutlinePrint;
use crate::models::*;
use crate::date_serializer;
use crate::date_serializer_opt;
use crate::serialize_quoted_numbers;
use crate::serialize_quoted_numbers_opt;
//Uncomment this to deal with limited rfc support on server side
//use crate::datetime_serializer::*;

#[derive(Debug, Serialize, Deserialize, PartialEq, Clone)]
pub struct Money {
  #[serde(rename = "cash")]
  cash: Decimal,  // 25614.89 
  #[serde(rename = "changes")]
  changes: Decimal,  // 525.21 
  #[serde(rename = "comission")]
  comission: Decimal,  // 2.0 
  #[serde(rename = "free")]
  free: Decimal,  // 525.25 
  #[serde(rename = "open")]
  open: Decimal,  // 45536.11 
  #[serde(rename = "portfolio")]
  portfolio: Decimal,  // 525.56 
  #[serde(rename = "profit")]
  profit: Decimal,  // -354.7 
  #[serde(rename = "profitRate")]
  profit_rate: Decimal,  // -354.7 
  #[serde(rename = "used")]
  used: Decimal  // 45536.11 
}

impl Money {
  pub fn new(cash: Decimal, changes: Decimal, comission: Decimal, free: Decimal, open: Decimal, portfolio: Decimal, profit: Decimal, profit_rate: Decimal, used: Decimal, ) -> Money {
    Money {
      cash: cash,
      changes: changes,
      comission: comission,
      free: free,
      open: open,
      portfolio: portfolio,
      profit: profit,
      profit_rate: profit_rate,
      used: used
    }
  }

  pub fn set_cash(&mut self, cash: Decimal) {
    self.cash = cash;
  }

  pub fn with_cash(mut self, cash: Decimal) -> Money {
    self.cash = cash;
    self
  }

  pub fn cash(&self) -> &Decimal {
    &self.cash
  }


  pub fn set_changes(&mut self, changes: Decimal) {
    self.changes = changes;
  }

  pub fn with_changes(mut self, changes: Decimal) -> Money {
    self.changes = changes;
    self
  }

  pub fn changes(&self) -> &Decimal {
    &self.changes
  }


  pub fn set_comission(&mut self, comission: Decimal) {
    self.comission = comission;
  }

  pub fn with_comission(mut self, comission: Decimal) -> Money {
    self.comission = comission;
    self
  }

  pub fn comission(&self) -> &Decimal {
    &self.comission
  }


  pub fn set_free(&mut self, free: Decimal) {
    self.free = free;
  }

  pub fn with_free(mut self, free: Decimal) -> Money {
    self.free = free;
    self
  }

  pub fn free(&self) -> &Decimal {
    &self.free
  }


  pub fn set_open(&mut self, open: Decimal) {
    self.open = open;
  }

  pub fn with_open(mut self, open: Decimal) -> Money {
    self.open = open;
    self
  }

  pub fn open(&self) -> &Decimal {
    &self.open
  }


  pub fn set_portfolio(&mut self, portfolio: Decimal) {
    self.portfolio = portfolio;
  }

  pub fn with_portfolio(mut self, portfolio: Decimal) -> Money {
    self.portfolio = portfolio;
    self
  }

  pub fn portfolio(&self) -> &Decimal {
    &self.portfolio
  }


  pub fn set_profit(&mut self, profit: Decimal) {
    self.profit = profit;
  }

  pub fn with_profit(mut self, profit: Decimal) -> Money {
    self.profit = profit;
    self
  }

  pub fn profit(&self) -> &Decimal {
    &self.profit
  }


  pub fn set_profit_rate(&mut self, profit_rate: Decimal) {
    self.profit_rate = profit_rate;
  }

  pub fn with_profit_rate(mut self, profit_rate: Decimal) -> Money {
    self.profit_rate = profit_rate;
    self
  }

  pub fn profit_rate(&self) -> &Decimal {
    &self.profit_rate
  }


  pub fn set_used(&mut self, used: Decimal) {
    self.used = used;
  }

  pub fn with_used(mut self, used: Decimal) -> Money {
    self.used = used;
    self
  }

  pub fn used(&self) -> &Decimal {
    &self.used
  }



  pub fn validate(&self) {
  }

}


