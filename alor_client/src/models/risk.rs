/* 
 * Alor OpenAPI V2
 *
 * API для работы с торговой системой АЛОР Брокер. Предоставляет интерфейсы для выставления заявок и получения биржевой информации.  Данные для неавторизованных запросов предоставляются с задержкой от 15 минут, для авторизованных - без задержек.   Публичная биржевая информация может быть получена через HTTP(S) API, а также доступна через однократно установленное WebSocket соединение. <br> **Внимание!** WebSocket соединения могут и будут разрываться *(например, если клиент не успевает обрабатывать сообщения и на стороне API в буфере накопится более 5000 событий)*. <br> Во внешнем ПО необходимо предусмотреть механизмы переподключения и переподписки (при необходимости)! <br> <br>  В OpenAPI V2 доступны \"Московская Биржа\" (MOEX) и \"Биржа СПБ\" (SPBX).   <h4> Доступные типы данных </h4>  * Все сделки  * Все заявки  * Информация по инструментам  * Котировки  * Биржевые стаканы  * Исторические данные  * Позиции  * Информация о клиенте  <h4>Поддерживаемые виды заявок</h4>  * рыночные  * лимитные  * стоп-лосс  * тейк-профит  * стоп-лосс лимит  * тейк-профит лимит  <h4>    Ограничения по частоте запросов     </h4> <p>На текущий момент ограничений по количеству запросов в минуту нет, однако есть ограничение на общее количество подписок (сотни тысяч). При достижении лимита подписок клиент будет заблокирован и в течение нескольких минут не сможет создавать новые подписки. Уже существующие подписки продолжат работать. <br/>  Сервер может обрабатывать \"тяжелые\" запросы (пример - история за все время) и запросы без авторизации с меньшим приоритетом.<br/> </p>  <h4>Получение списка портфелей</h4> <p>Получить список доступных портфелей можно из JWT токена</p> <p>Для получения списка доступных портфелей необходимо декодировать JWT токен. Портфели находятся в поле <b>portfolios</b>.</p> <br/>  <h2> Авторизация </h2>  <h4>OAuth</h4>  <b>Внимание!</b>   JWT и refresh token — равносильны логину и паролю. Их нужно скрывать от публичного доступа.  <h4>Для разработчиков сторонних приложений, в которых торговлю будут вести их пользователи.</h4>  Мы предоставляем сервис для авторизации сторониих приложений по стандарту OAuth 2.0. С примером приложения, использующего OAuth сервис для авторизации пользователей можно ознакомиться в разделе  <a href=\"/examples\">Примеры</a>.  Список разрешений (scopes), которые могут быть выданы приложению: <table>   <tr>     <td><b>OrdersRead</b></td>     <td>Чтение выставленных заявок</td>   </tr>   <tr>     <td><b>OrdersCreate</b></td>     <td>Выставление заявок</td>   </tr>   <tr>     <td><b>Trades</b></td>     <td>Чтение совершенных сделок</td>   </tr>   <tr>     <td><b>Personal</b></td>     <td>Персональная информация: ФИО, почта и т.п.</td>   </tr>   <tr>     <td><b>Stats</b></td>     <td>Статистика: прибыль, средние цены и т.п.</td>   </tr> </table>  <h4>Для ведения операций от своего имени</h4>  Выписать себе <b>refresh token</b> для ведения операций от своего имени [можно здесь](https://alor.dev/open-api-tokens).  <h2>Краткое описание работы с авторизацией</h2>  Чтобы выполнить авторизованный запрос, добавьте в запрос заголовок с именем \"Authorization\" и значением, состоящим из префикса `\"Bearer \"` и валидного JWT токена.  Срок жизни JWT короткий: это сделано для безопасности.  Для большинства вариантов использования API мы рекоммендуем использовать механизм  <b>refresh token</b> .  Механизм  <b>refresh token</b>  позволяет получать JWT с новым сроком жизни. Для этого отправьте POST запрос на адрес `https://oauthdev.alor.ru/refresh?token={refreshToken}` *(тестовый контур)* или `https://oauth.alor.ru/refresh?token={refreshToken}` *(боевой контур)*. Если у  <b>refresh token</b>  не истек срок жизни и не он не был отозван, то в теле ответа в поле AccessToken вернётся свежий JWT токен.   Срок жизни  <b>refresh token</b>, получаемого обычным способом — 1 месяц.   Срок жизни  <b>refresh token</b>, получаемого самостоятельным выписыванием — год.  | |-  > Если мы для вас не завели портфели для ведения торговли в игровом контуре, оставьте заявку на <a href=\"mailto:openapi@alor.ru\">openapi@alor.ru</a> или свяжитесь с нами в [телеграме](https://t.me/AlorOpenAPI).  </br></br> Тестовый контур: `https://apidev.alor.ru`  Боевой контур: `https://api.alor.ru` 
 *
 * OpenAPI spec version: 1.0
 * Contact: openapi@alor.ru
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
#![allow(unused_imports)]

use serde_json::Value;
use rust_decimal::Decimal;
use chrono::{NaiveDateTime, NaiveDate, DateTime, FixedOffset, Utc};

use crate::OutlinePrint;
use crate::models::*;
use crate::date_serializer;
use crate::date_serializer_opt;
use crate::serialize_quoted_numbers;
use crate::serialize_quoted_numbers_opt;
//Uncomment this to deal with limited rfc support on server side
//use crate::datetime_serializer::*;

#[derive(Debug, Serialize, Deserialize, PartialEq, Clone)]
pub struct Risk {
  #[serde(rename = "clientType")]
  
  client_type: ClientType, 
  #[serde(rename = "correctedMargin")]
  ///Скорректированная маржа
  corrected_margin: Decimal,  // 15752.115 
  #[serde(rename = "exchange")]
  
  exchange: Exchange, 
  #[serde(rename = "hasForbiddenPositions")]
  ///Имеются ли запретные позиции
  has_forbidden_positions: bool,  // false 
  #[serde(rename = "hasNegativeQuantity")]
  ///Имеются ли отрицательные количества
  has_negative_quantity: bool,  // false 
  #[serde(rename = "initialMargin")]
  ///Начальная маржа
  initial_margin: Decimal,  // 15752.115 
  #[serde(rename = "minimalMargin")]
  ///Минимальная маржа
  minimal_margin: Decimal,  // 65177.0575 
  #[serde(rename = "portfolio")]
  ///Идентификатор клиентского портфеля
  portfolio: String,  // D49004 
  #[serde(rename = "portfolioEvaluation")]
  ///Общая стоимость портфеля
  portfolio_evaluation: Decimal,  // 646270.9 
  #[serde(rename = "portfolioLiquidationValue")]
  ///Стоимость ликвидного портфеля
  portfolio_liquidation_value: Decimal,  // 646270.9 
  #[serde(rename = "riskCategoryId")]
  ///Категория риска. 
  risk_category_id: i32,  // 2 
  #[serde(rename = "riskCoverageRatioOne")]
  ///НПР1
  risk_coverage_ratio_one: Decimal,  // 630518.785 
  #[serde(rename = "riskCoverageRatioTwo")]
  ///НПР2
  risk_coverage_ratio_two: Decimal  // 638394.8425 
}

impl Risk {
  pub fn new(client_type: ClientType, corrected_margin: Decimal, exchange: Exchange, has_forbidden_positions: bool, has_negative_quantity: bool, initial_margin: Decimal, minimal_margin: Decimal, portfolio: String, portfolio_evaluation: Decimal, portfolio_liquidation_value: Decimal, risk_category_id: i32, risk_coverage_ratio_one: Decimal, risk_coverage_ratio_two: Decimal, ) -> Risk {
    Risk {
      client_type: client_type,
      corrected_margin: corrected_margin,
      exchange: exchange,
      has_forbidden_positions: has_forbidden_positions,
      has_negative_quantity: has_negative_quantity,
      initial_margin: initial_margin,
      minimal_margin: minimal_margin,
      portfolio: portfolio,
      portfolio_evaluation: portfolio_evaluation,
      portfolio_liquidation_value: portfolio_liquidation_value,
      risk_category_id: risk_category_id,
      risk_coverage_ratio_one: risk_coverage_ratio_one,
      risk_coverage_ratio_two: risk_coverage_ratio_two
    }
  }

  pub fn set_client_type(&mut self, client_type: ClientType) {
    self.client_type = client_type;
  }

  pub fn with_client_type(mut self, client_type: ClientType) -> Risk {
    self.client_type = client_type;
    self
  }
  
  pub fn client_type(&self) -> &ClientType {
    &self.client_type
  }


  pub fn set_corrected_margin(&mut self, corrected_margin: Decimal) {
    self.corrected_margin = corrected_margin;
  }

  pub fn with_corrected_margin(mut self, corrected_margin: Decimal) -> Risk {
    self.corrected_margin = corrected_margin;
    self
  }
  ///Скорректированная маржа
  pub fn corrected_margin(&self) -> &Decimal {
    &self.corrected_margin
  }


  pub fn set_exchange(&mut self, exchange: Exchange) {
    self.exchange = exchange;
  }

  pub fn with_exchange(mut self, exchange: Exchange) -> Risk {
    self.exchange = exchange;
    self
  }
  
  pub fn exchange(&self) -> &Exchange {
    &self.exchange
  }


  pub fn set_has_forbidden_positions(&mut self, has_forbidden_positions: bool) {
    self.has_forbidden_positions = has_forbidden_positions;
  }

  pub fn with_has_forbidden_positions(mut self, has_forbidden_positions: bool) -> Risk {
    self.has_forbidden_positions = has_forbidden_positions;
    self
  }
  ///Имеются ли запретные позиции
  pub fn has_forbidden_positions(&self) -> &bool {
    &self.has_forbidden_positions
  }


  pub fn set_has_negative_quantity(&mut self, has_negative_quantity: bool) {
    self.has_negative_quantity = has_negative_quantity;
  }

  pub fn with_has_negative_quantity(mut self, has_negative_quantity: bool) -> Risk {
    self.has_negative_quantity = has_negative_quantity;
    self
  }
  ///Имеются ли отрицательные количества
  pub fn has_negative_quantity(&self) -> &bool {
    &self.has_negative_quantity
  }


  pub fn set_initial_margin(&mut self, initial_margin: Decimal) {
    self.initial_margin = initial_margin;
  }

  pub fn with_initial_margin(mut self, initial_margin: Decimal) -> Risk {
    self.initial_margin = initial_margin;
    self
  }
  ///Начальная маржа
  pub fn initial_margin(&self) -> &Decimal {
    &self.initial_margin
  }


  pub fn set_minimal_margin(&mut self, minimal_margin: Decimal) {
    self.minimal_margin = minimal_margin;
  }

  pub fn with_minimal_margin(mut self, minimal_margin: Decimal) -> Risk {
    self.minimal_margin = minimal_margin;
    self
  }
  ///Минимальная маржа
  pub fn minimal_margin(&self) -> &Decimal {
    &self.minimal_margin
  }


  pub fn set_portfolio(&mut self, portfolio: String) {
    self.portfolio = portfolio;
  }

  pub fn with_portfolio(mut self, portfolio: String) -> Risk {
    self.portfolio = portfolio;
    self
  }
  ///Идентификатор клиентского портфеля
  pub fn portfolio(&self) -> &String {
    &self.portfolio
  }


  pub fn set_portfolio_evaluation(&mut self, portfolio_evaluation: Decimal) {
    self.portfolio_evaluation = portfolio_evaluation;
  }

  pub fn with_portfolio_evaluation(mut self, portfolio_evaluation: Decimal) -> Risk {
    self.portfolio_evaluation = portfolio_evaluation;
    self
  }
  ///Общая стоимость портфеля
  pub fn portfolio_evaluation(&self) -> &Decimal {
    &self.portfolio_evaluation
  }


  pub fn set_portfolio_liquidation_value(&mut self, portfolio_liquidation_value: Decimal) {
    self.portfolio_liquidation_value = portfolio_liquidation_value;
  }

  pub fn with_portfolio_liquidation_value(mut self, portfolio_liquidation_value: Decimal) -> Risk {
    self.portfolio_liquidation_value = portfolio_liquidation_value;
    self
  }
  ///Стоимость ликвидного портфеля
  pub fn portfolio_liquidation_value(&self) -> &Decimal {
    &self.portfolio_liquidation_value
  }


  pub fn set_risk_category_id(&mut self, risk_category_id: i32) {
    self.risk_category_id = risk_category_id;
  }

  pub fn with_risk_category_id(mut self, risk_category_id: i32) -> Risk {
    self.risk_category_id = risk_category_id;
    self
  }
  ///Категория риска. 
  pub fn risk_category_id(&self) -> &i32 {
    &self.risk_category_id
  }


  pub fn set_risk_coverage_ratio_one(&mut self, risk_coverage_ratio_one: Decimal) {
    self.risk_coverage_ratio_one = risk_coverage_ratio_one;
  }

  pub fn with_risk_coverage_ratio_one(mut self, risk_coverage_ratio_one: Decimal) -> Risk {
    self.risk_coverage_ratio_one = risk_coverage_ratio_one;
    self
  }
  ///НПР1
  pub fn risk_coverage_ratio_one(&self) -> &Decimal {
    &self.risk_coverage_ratio_one
  }


  pub fn set_risk_coverage_ratio_two(&mut self, risk_coverage_ratio_two: Decimal) {
    self.risk_coverage_ratio_two = risk_coverage_ratio_two;
  }

  pub fn with_risk_coverage_ratio_two(mut self, risk_coverage_ratio_two: Decimal) -> Risk {
    self.risk_coverage_ratio_two = risk_coverage_ratio_two;
    self
  }
  ///НПР2
  pub fn risk_coverage_ratio_two(&self) -> &Decimal {
    &self.risk_coverage_ratio_two
  }



  pub fn validate(&self) {
  }

}


